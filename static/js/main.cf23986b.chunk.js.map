{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["serializeIdx","x","y","cellOrNone","goban","idx","length","StoneSvg","props","value","xmlns","viewBox","cx","cy","r","fill","stroke","stroke-width","CellElm","className","onClick","onclick","StatusBox","isFinished","winner","turn","Board","useState","cells","Array","ROWS","state","setState","handleCellClick","slice","x_orig","y_orig","has_won","direction","count","judgeWinner","toggleTurn","renderCell","i","row_cells","j","push","id","SideBar","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cf23986b.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\n\nconst ROWS = 10;\nconst COLUMNS = 10;\n\ntype BlackOrWhite = \"white\" | \"black\";\ntype Cell = BlackOrWhite | \"none\";\ntype Winner = BlackOrWhite | \"none\";\ntype Turn = BlackOrWhite;\n\ninterface BoardState {\n  cells: Cell[],\n  turn: Turn,\n  isFinished: boolean,\n  winner: Winner\n}\n\nfunction serializeIdx(x: number, y: number): number {\n  return x * ROWS + y;\n}\n\nfunction cellOrNone(goban: Cell[], x: number, y: number): Cell {\n  const idx = serializeIdx(x, y);\n  return (0 <= idx && idx < goban.length) ? goban[idx] : \"none\";\n}\n\nfunction judgeWinner(goban: Cell[], x: number, y: number, turn: Turn): Winner {\n  const x_orig = x;\n  const y_orig = y;\n  const directions = [\n    [1, 0],\n    [0, 1],\n    [1, 1],\n    [1, -1]\n  ];\n\n  let has_won = false;\n  for (const direction of directions) {\n\n    let count = 1;\n\n    let x = x_orig + direction[0];\n    let y = y_orig + direction[1];\n    while (cellOrNone(goban, x, y) === turn) {\n      x += direction[0];\n      y += direction[1];\n      ++count;\n    }\n\n    x = x_orig - direction[0];\n    y = y_orig - direction[1];\n    while (cellOrNone(goban, x, y) === turn) {\n      x -= direction[0];\n      y -= direction[1];\n      ++count;\n    }\n\n    if (count >= 5) {\n      has_won = true;\n      break;\n    };\n  }\n\n  return has_won ? turn : \"none\";\n}\n\nconst StoneSvg = (props: { value: BlackOrWhite | any }) => {\n  if (props.value !== \"white\" && props.value !== \"black\") return null;\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\">\n      <circle cx=\"50\" cy=\"50\" r=\"30\" fill={props.value} stroke=\"black\" stroke-width=\"5\"></circle>\n    </svg>\n  );\n}\n\nconst CellElm = (props: { value: Cell, onclick: (event: any) => void }) => {\n  return (\n    <div className=\"cell-wrapper\">\n      <div className=\"cell\" onClick={props.onclick}><StoneSvg value={props.value} /></div>\n    </div >\n  )\n}\n\nconst StatusBox = (props: { turn: Turn, isFinished: boolean, winner: Winner }) => {\n  return (\n    <div>\n      {!props.isFinished\n        ? <p>次は<div className=\"inline-stone\"><StoneSvg value={props.turn} /></div>の手番です</p>\n        : <p><div className=\"inline-stone\"><StoneSvg value={props.winner} /></div>が勝ちました</p>}\n    </div>\n  )\n}\n\nconst Board = () => {\n\n  const [state, setState] = useState<BoardState>({\n    cells: Array<Cell>(ROWS * COLUMNS).fill(\"none\"),\n    turn: \"white\",\n    isFinished: false,\n    winner: \"none\"\n  });\n\n  const toggleTurn = (turn: Turn): Turn =>\n    turn === \"white\" ? \"black\" : \"white\";\n\n  const handleCellClick = (x: number, y: number) => {\n    if (state.isFinished || state.cells[serializeIdx(x, y)] !== \"none\") return;\n    const cells = state.cells.slice();\n    cells[serializeIdx(x, y)] = state.turn;\n\n\n    const winner = judgeWinner(cells, x, y, state.turn);\n    const turn = toggleTurn(state.turn);\n    const isFinished = winner !== \"none\";\n\n    setState({ cells, turn, isFinished, winner });\n  }\n\n  const renderCell = (x: number, y: number) => <CellElm value={state.cells[serializeIdx(x, y)]} onclick={() => handleCellClick(x, y)} />;\n\n  const restart = () => {\n    setState({\n      cells: Array<Cell>(ROWS * COLUMNS).fill(\"none\"),\n      turn: \"white\",\n      isFinished: false,\n      winner: \"none\"\n    });\n  }\n\n\n  const goban = [];\n  for (let i = 0; i < ROWS; ++i) {\n    const row_cells = [];\n    for (let j = 0; j < COLUMNS; ++j) {\n      row_cells.push(renderCell(i, j));\n    }\n    goban.push(<div className=\"board-row\">{row_cells}</div>);\n  }\n\n  return (\n    <div id=\"game\" className=\"item\">\n      <StatusBox turn={state.turn} isFinished={state.isFinished} winner={state.winner} />\n      <div id=\"goban\">\n        {goban}\n      </div>\n      <button onClick={() => restart()}>RESTART</button>\n    </div>\n  )\n}\n\nconst SideBar = () => {\n  return (\n    <div id=\"side\" className=\"item\">\n      <section>\n        <h1>遊び方</h1>\n        <ol>\n          <li>[RESTART]を押します</li>\n          <li>白黒を交互に打ちます</li>\n          <li>先に5つ縦横斜めのどこかに連続して並べたら勝利です</li>\n        </ol>\n      </section>\n    </div>\n  )\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>五目並べ</h1>\n      <div className=\"container\">\n        <Board />\n        <SideBar />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}